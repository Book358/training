# ディープラーニング
# (Aidemy データ分析講座(添削課題12))
import numpy as np
import tensorflow as tf
import pandas as pd
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Activation, Dense, Dropout, Input, BatchNormalization
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.datasets import fetch_california_housing
import matplotlib.pyplot as plt
# 出力結果の固定
tf.random.set_seed(0)
%matplotlib inline
# sklearnからデータセットを読み込みます
california_housing = fetch_california_housing()
X = pd.DataFrame(california_housing.data, columns=california_housing.feature_names)
Y = pd.Series(california_housing.target)
# 説明変数のデータから緯度・経度（Latitude・Longitude）のデータを削除します
X=X.drop(columns=['Latitude','Longitude'])
# テストデータとトレーニングデータに分割します
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.25, random_state=42)
print("X_train")
print(X_train.head(3))
print()
print("y_train")
print(y_train.head(3))
print()
# Sequentialモデル (ニューラルネットワークの各層を順番につなげたモデル)
model = Sequential()
model.add(Dense(32, input_dim=6))
model.add(Activation('relu'))
# 上にならって、ユニット数128の中間層をmodel.addで追加してください。
model.add(Dense(128, input_dim=6)) # 中間層の追加 (ユニット数128)
# 上にならって、活性化関数reluをmodel.addで追加してください。
model.add(Activation('relu'))      # 活性化関数の追加 (relu)
model.add(Dense(1))
# 損失関数にmse、最適化関数にadamを採用
model.compile(loss='mse', optimizer='adam')
# モデルを学習させます
history = model.fit(X_train, y_train,
                    epochs=30,      # エポック数
                    batch_size=16,  # バッチサイズ
                    verbose=1,
                    validation_data=(X_test, y_test))
# 予測値を出力します
y_pred = model.predict(X_test)  # model.predictにX_testのデータを入れて予測値を出力させてください
# 二乗誤差を出力します
mse= mean_squared_error(y_test, y_pred)
print("REG RMSE : %.2f" % (mse** 0.5))
# epoch毎の予測値の正解データとの誤差を表しています
# バリデーションデータのみ誤差が大きい場合、過学習を起こしています
train_loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = len(train_loss)
plt.plot(range(epochs), train_loss, marker = '.', label = 'train_loss')
plt.plot(range(epochs), val_loss, marker = '.', label = 'val_loss')
plt.legend(loc = 'best')
plt.grid()
plt.xlabel('epoch')
plt.ylabel('loss')
plt.show()