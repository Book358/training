# 時系列解析Ⅲ (LSTM応用)
# (Aidemy データ分析講座(添削課題15))
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from tensorflow import keras
import math
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
from IPython.core.interactiveshell import InteractiveShell
pd.options.display.max_rows = 5
InteractiveShell.ast_node_interactivity = "all"

# 関数 (入力データ・正解ラベルの作成)
def create_data(data, look_back):
    data_X, data_Y = [], []
    for i in range(look_back, len(data)):
        data_X.append(data[i-look_back:i, 0])
        data_Y.append(data[i, 0])
    return np.array(data_X), np.array(data_Y)

# データセット
data = pd.read_csv('nikkei225.csv', usecols=[1], engine='python', skipfooter=3)
data
data = data.values
data
data = data.astype('float32')
data.dtype

# データ分割
train_size = int(len(data) * 0.67)
train = data[0:train_size, :]
test = data[train_size:len(data), :]
train.shape
test.shape

# スケーリング (正規化)
scaler = MinMaxScaler(feature_range=(0, 1))
scaler_train = scaler.fit(train)
scaler_train
train = scaler_train.transform(train)
test = scaler_train.transform(test)
train

# 入力データと正解ラベルを作成
look_back = 3
train_X, train_Y = create_data(train, look_back)
test_X, test_Y = create_data(test, look_back)
train_X
train_Y

# データ整形
train_X = train_X.reshape(train_X.shape[0], train_X.shape[1], 1)
test_X = test_X.reshape(test_X.shape[0], test_X.shape[1], 1)
train_X

# モデル構築 (LSTM)
model = keras.Sequential()
model.add(keras.layers.LSTM(64, input_shape=(look_back, 1), return_sequences=True))
model.add(keras.layers.LSTM(32))
model.add(keras.layers.Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')
model

# 学習
model.fit(train_X, train_Y, epochs=15, batch_size=1, verbose=2)
model

# 予測データの作成
train_predict = model.predict(train_X)
test_predict = model.predict(test_X)
train_predict

# スケールしたデータを元に戻す
train_predict = scaler_train.inverse_transform(train_predict)
train_Y = scaler_train.inverse_transform([train_Y])
test_predict = scaler_train.inverse_transform(test_predict)
test_Y = scaler_train.inverse_transform([test_Y])
train_predict
train_Y

# 予測精度の計算
train_score = math.sqrt(mean_squared_error(train_Y[0], train_predict[:, 0]))
test_score = math.sqrt(mean_squared_error(test_Y[0], test_predict[:, 0]))
print('Train Score: %.2f RMSE' % (train_score))
print('Test Score: %.2f RMSE' % (test_score))

# プロットのためのデータ整形
train_predict_plot = np.empty_like(data)
train_predict_plot[:, :] = np.nan
train_predict_plot[look_back:len(train_predict)+look_back, :] = train_predict
train_predict_plot.shape
train_predict_plot

test_predict_plot = np.empty_like(data)
test_predict_plot[:, :] = np.nan
test_predict_plot[len(train_predict)+(look_back*2):len(data), :] = test_predict

# データのプロット
plt.title("nikkei225")
plt.xlabel("time (day)")
plt.ylabel("closing price")
plt.plot(data, label='nikkei225 data')
plt.plot(train_predict_plot, label='train_predict')
plt.plot(test_predict_plot, label='test_predict')
plt.legend(loc='upper right')
plt.show()